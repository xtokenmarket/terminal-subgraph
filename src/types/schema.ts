// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Terminal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Terminal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Terminal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Terminal", id.toString(), this);
    }
  }

  static load(id: string): Terminal | null {
    return changetype<Terminal | null>(store.get("Terminal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolCount(): i32 {
    let value = this.get("poolCount");
    return value!.toI32();
  }

  set poolCount(value: i32) {
    this.set("poolCount", Value.fromI32(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string | null {
    let value = this.get("token0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token0(value: string | null) {
    if (!value) {
      this.unset("token0");
    } else {
      this.set("token0", Value.fromString(<string>value));
    }
  }

  get token1(): string | null {
    let value = this.get("token1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token1(value: string | null) {
    if (!value) {
      this.unset("token1");
    } else {
      this.set("token1", Value.fromString(<string>value));
    }
  }

  get lowerTick(): i32 {
    let value = this.get("lowerTick");
    return value!.toI32();
  }

  set lowerTick(value: i32) {
    this.set("lowerTick", Value.fromI32(value));
  }

  get upperTick(): i32 {
    let value = this.get("upperTick");
    return value!.toI32();
  }

  set upperTick(value: i32) {
    this.set("upperTick", Value.fromI32(value));
  }

  get ticks(): Array<BigInt> | null {
    let value = this.get("ticks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set ticks(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("ticks");
    } else {
      this.set("ticks", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get manager(): string | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set manager(value: string | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromString(<string>value));
    }
  }

  get rewards(): Array<string> | null {
    let value = this.get("rewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewards(value: Array<string> | null) {
    if (!value) {
      this.unset("rewards");
    } else {
      this.set("rewards", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewardTokens(): Array<string> | null {
    let value = this.get("rewardTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardTokens(value: Array<string> | null) {
    if (!value) {
      this.unset("rewardTokens");
    } else {
      this.set("rewardTokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewardAmounts(): Array<BigInt> | null {
    let value = this.get("rewardAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardAmounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardAmounts");
    } else {
      this.set("rewardAmounts", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get rewardAmountsPerWeek(): Array<BigInt> | null {
    let value = this.get("rewardAmountsPerWeek");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardAmountsPerWeek(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardAmountsPerWeek");
    } else {
      this.set(
        "rewardAmountsPerWeek",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get rewardsAreEscrowed(): boolean {
    let value = this.get("rewardsAreEscrowed");
    return value!.toBoolean();
  }

  set rewardsAreEscrowed(value: boolean) {
    this.set("rewardsAreEscrowed", Value.fromBoolean(value));
  }

  get rewardDuration(): BigInt | null {
    let value = this.get("rewardDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewardDuration(value: BigInt | null) {
    if (!value) {
      this.unset("rewardDuration");
    } else {
      this.set("rewardDuration", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenId(): BigInt | null {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt | null) {
    if (!value) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get poolFee(): i32 {
    let value = this.get("poolFee");
    return value!.toI32();
  }

  set poolFee(value: i32) {
    this.set("poolFee", Value.fromI32(value));
  }

  get tradeFee(): BigInt | null {
    let value = this.get("tradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tradeFee(value: BigInt | null) {
    if (!value) {
      this.unset("tradeFee");
    } else {
      this.set("tradeFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get uniswapPool(): string | null {
    let value = this.get("uniswapPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uniswapPool(value: string | null) {
    if (!value) {
      this.unset("uniswapPool");
    } else {
      this.set("uniswapPool", Value.fromString(<string>value));
    }
  }

  get periodFinish(): BigInt | null {
    let value = this.get("periodFinish");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set periodFinish(value: BigInt | null) {
    if (!value) {
      this.unset("periodFinish");
    } else {
      this.set("periodFinish", Value.fromBigInt(<BigInt>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get stakedToken(): string | null {
    let value = this.get("stakedToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakedToken(value: string | null) {
    if (!value) {
      this.unset("stakedToken");
    } else {
      this.set("stakedToken", Value.fromString(<string>value));
    }
  }

  get stakedTokenBalance(): Array<BigInt> | null {
    let value = this.get("stakedTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set stakedTokenBalance(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("stakedTokenBalance");
    } else {
      this.set(
        "stakedTokenBalance",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get bufferTokenBalance(): Array<BigInt> | null {
    let value = this.get("bufferTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set bufferTokenBalance(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("bufferTokenBalance");
    } else {
      this.set(
        "bufferTokenBalance",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get vestingPeriod(): BigInt | null {
    let value = this.get("vestingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set vestingPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("vestingPeriod");
    } else {
      this.set("vestingPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get isReward(): boolean {
    let value = this.get("isReward");
    return value!.toBoolean();
  }

  set isReward(value: boolean) {
    this.set("isReward", Value.fromBoolean(value));
  }

  get isSingleAssetPool(): boolean {
    let value = this.get("isSingleAssetPool");
    return value!.toBoolean();
  }

  set isSingleAssetPool(value: boolean) {
    this.set("isSingleAssetPool", Value.fromBoolean(value));
  }

  get deposits(): Array<string> | null {
    let value = this.get("deposits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set deposits(value: Array<string> | null) {
    if (!value) {
      this.unset("deposits");
    } else {
      this.set("deposits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get withdrawals(): Array<string> | null {
    let value = this.get("withdrawals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set withdrawals(value: Array<string> | null) {
    if (!value) {
      this.unset("withdrawals");
    } else {
      this.set("withdrawals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get claimedRewards(): Array<string> | null {
    let value = this.get("claimedRewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set claimedRewards(value: Array<string> | null) {
    if (!value) {
      this.unset("claimedRewards");
    } else {
      this.set("claimedRewards", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewardInitiations(): Array<string> | null {
    let value = this.get("rewardInitiations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardInitiations(value: Array<string> | null) {
    if (!value) {
      this.unset("rewardInitiations");
    } else {
      this.set(
        "rewardInitiations",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get vests(): Array<string> | null {
    let value = this.get("vests");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set vests(value: Array<string> | null) {
    if (!value) {
      this.unset("vests");
    } else {
      this.set("vests", Value.fromStringArray(<Array<string>>value));
    }
  }

  get collects(): Array<string> | null {
    let value = this.get("collects");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set collects(value: Array<string> | null) {
    if (!value) {
      this.unset("collects");
    } else {
      this.set("collects", Value.fromStringArray(<Array<string>>value));
    }
  }

  get reinvests(): Array<string> | null {
    let value = this.get("reinvests");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set reinvests(value: Array<string> | null) {
    if (!value) {
      this.unset("reinvests");
    } else {
      this.set("reinvests", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountPerWeek(): BigInt {
    let value = this.get("amountPerWeek");
    return value!.toBigInt();
  }

  set amountPerWeek(value: BigInt) {
    this.set("amountPerWeek", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get amount0(): BigInt {
    let value = this.get("amount0");
    return value!.toBigInt();
  }

  set amount0(value: BigInt) {
    this.set("amount0", Value.fromBigInt(value));
  }

  get amount1(): BigInt {
    let value = this.get("amount1");
    return value!.toBigInt();
  }

  set amount1(value: BigInt) {
    this.set("amount1", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get amount0(): BigInt {
    let value = this.get("amount0");
    return value!.toBigInt();
  }

  set amount0(value: BigInt) {
    this.set("amount0", Value.fromBigInt(value));
  }

  get amount1(): BigInt {
    let value = this.get("amount1");
    return value!.toBigInt();
  }

  set amount1(value: BigInt) {
    this.set("amount1", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class StakeDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakeDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakeDeposit", id.toString(), this);
    }
  }

  static load(id: string): StakeDeposit | null {
    return changetype<StakeDeposit | null>(store.get("StakeDeposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class StakeWithdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeWithdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakeWithdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakeWithdrawal", id.toString(), this);
    }
  }

  static load(id: string): StakeWithdrawal | null {
    return changetype<StakeWithdrawal | null>(store.get("StakeWithdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RewardClaim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardClaim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardClaim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RewardClaim", id.toString(), this);
    }
  }

  static load(id: string): RewardClaim | null {
    return changetype<RewardClaim | null>(store.get("RewardClaim", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }
}

export class RewardInitiation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardInitiation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardInitiation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RewardInitiation", id.toString(), this);
    }
  }

  static load(id: string): RewardInitiation | null {
    return changetype<RewardInitiation | null>(
      store.get("RewardInitiation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get rewards(): Array<string> | null {
    let value = this.get("rewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewards(value: Array<string> | null) {
    if (!value) {
      this.unset("rewards");
    } else {
      this.set("rewards", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get amounts(): Array<BigInt> | null {
    let value = this.get("amounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set amounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("amounts");
    } else {
      this.set("amounts", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value!.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Vest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vest", id.toString(), this);
    }
  }

  static load(id: string): Vest | null {
    return changetype<Vest | null>(store.get("Vest", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get beneficiary(): string {
    let value = this.get("beneficiary");
    return value!.toString();
  }

  set beneficiary(value: string) {
    this.set("beneficiary", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get period(): BigInt {
    let value = this.get("period");
    return value!.toBigInt();
  }

  set period(value: BigInt) {
    this.set("period", Value.fromBigInt(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }
}

export class Uniswap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Uniswap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Uniswap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Uniswap", id.toString(), this);
    }
  }

  static load(id: string): Uniswap | null {
    return changetype<Uniswap | null>(store.get("Uniswap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (!value) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(<string>value));
    }
  }
}

export class Collect extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collect entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collect must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collect", id.toString(), this);
    }
  }

  static load(id: string): Collect | null {
    return changetype<Collect | null>(store.get("Collect", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0Fee(): BigInt {
    let value = this.get("token0Fee");
    return value!.toBigInt();
  }

  set token0Fee(value: BigInt) {
    this.set("token0Fee", Value.fromBigInt(value));
  }

  get token1Fee(): BigInt {
    let value = this.get("token1Fee");
    return value!.toBigInt();
  }

  set token1Fee(value: BigInt) {
    this.set("token1Fee", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Reinvest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reinvest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reinvest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Reinvest", id.toString(), this);
    }
  }

  static load(id: string): Reinvest | null {
    return changetype<Reinvest | null>(store.get("Reinvest", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get managingPools(): Array<string> | null {
    let value = this.get("managingPools");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set managingPools(value: Array<string> | null) {
    if (!value) {
      this.unset("managingPools");
    } else {
      this.set("managingPools", Value.fromStringArray(<Array<string>>value));
    }
  }

  get ownedPools(): Array<string> | null {
    let value = this.get("ownedPools");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ownedPools(value: Array<string> | null) {
    if (!value) {
      this.unset("ownedPools");
    } else {
      this.set("ownedPools", Value.fromStringArray(<Array<string>>value));
    }
  }

  get deposits(): Array<string> | null {
    let value = this.get("deposits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set deposits(value: Array<string> | null) {
    if (!value) {
      this.unset("deposits");
    } else {
      this.set("deposits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get withdrawals(): Array<string> | null {
    let value = this.get("withdrawals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set withdrawals(value: Array<string> | null) {
    if (!value) {
      this.unset("withdrawals");
    } else {
      this.set("withdrawals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get claimedRewards(): Array<string> | null {
    let value = this.get("claimedRewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set claimedRewards(value: Array<string> | null) {
    if (!value) {
      this.unset("claimedRewards");
    } else {
      this.set("claimedRewards", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewardInitiations(): Array<string> | null {
    let value = this.get("rewardInitiations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardInitiations(value: Array<string> | null) {
    if (!value) {
      this.unset("rewardInitiations");
    } else {
      this.set(
        "rewardInitiations",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get vests(): Array<string> | null {
    let value = this.get("vests");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set vests(value: Array<string> | null) {
    if (!value) {
      this.unset("vests");
    } else {
      this.set("vests", Value.fromStringArray(<Array<string>>value));
    }
  }
}

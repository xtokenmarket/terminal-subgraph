// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeCollected extends ethereum.Event {
  get params(): FeeCollected__Params {
    return new FeeCollected__Params(this);
  }
}

export class FeeCollected__Params {
  _event: FeeCollected;

  constructor(event: FeeCollected) {
    this._event = event;
  }

  get token0Fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token1Fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ManagerSet extends ethereum.Event {
  get params(): ManagerSet__Params {
    return new ManagerSet__Params(this);
  }
}

export class ManagerSet__Params {
  _event: ManagerSet;

  constructor(event: ManagerSet) {
    this._event = event;
  }

  get manager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Reinvest extends ethereum.Event {
  get params(): Reinvest__Params {
    return new Reinvest__Params(this);
  }
}

export class Reinvest__Params {
  _event: Reinvest;

  constructor(event: Reinvest) {
    this._event = event;
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get reward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardClaimed extends ethereum.Event {
  get params(): RewardClaimed__Params {
    return new RewardClaimed__Params(this);
  }
}

export class RewardClaimed__Params {
  _event: RewardClaimed;

  constructor(event: RewardClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardsDurationUpdated extends ethereum.Event {
  get params(): RewardsDurationUpdated__Params {
    return new RewardsDurationUpdated__Params(this);
  }
}

export class RewardsDurationUpdated__Params {
  _event: RewardsDurationUpdated;

  constructor(event: RewardsDurationUpdated) {
    this._event = event;
  }

  get newDuration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Pool__calculateAmountsMintedSingleTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pool__calculatePoolMintedAmountsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pool__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pool__getAmountsForLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pool__getBufferTokenBalanceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pool__getStakedTokenBalanceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pool__getTicksResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    return map;
  }
}

export class Pool__rewardInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Pool__uniContractsResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateAmountsMintedSingleToken(
    inputAsset: i32,
    amount: BigInt
  ): Pool__calculateAmountsMintedSingleTokenResult {
    let result = super.call(
      "calculateAmountsMintedSingleToken",
      "calculateAmountsMintedSingleToken(uint8,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputAsset)),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new Pool__calculateAmountsMintedSingleTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calculateAmountsMintedSingleToken(
    inputAsset: i32,
    amount: BigInt
  ): ethereum.CallResult<Pool__calculateAmountsMintedSingleTokenResult> {
    let result = super.tryCall(
      "calculateAmountsMintedSingleToken",
      "calculateAmountsMintedSingleToken(uint8,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputAsset)),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__calculateAmountsMintedSingleTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calculateMintAmount(amount0: BigInt, amount1: BigInt): BigInt {
    let result = super.call(
      "calculateMintAmount",
      "calculateMintAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateMintAmount(
    amount0: BigInt,
    amount1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateMintAmount",
      "calculateMintAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePoolMintedAmounts(
    amount0: BigInt,
    amount1: BigInt
  ): Pool__calculatePoolMintedAmountsResult {
    let result = super.call(
      "calculatePoolMintedAmounts",
      "calculatePoolMintedAmounts(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1)
      ]
    );

    return new Pool__calculatePoolMintedAmountsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calculatePoolMintedAmounts(
    amount0: BigInt,
    amount1: BigInt
  ): ethereum.CallResult<Pool__calculatePoolMintedAmountsResult> {
    let result = super.tryCall(
      "calculatePoolMintedAmounts",
      "calculatePoolMintedAmounts(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__calculatePoolMintedAmountsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  collect(): Pool__collectResult {
    let result = super.call("collect", "collect():(uint256,uint256)", []);

    return new Pool__collectResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_collect(): ethereum.CallResult<Pool__collectResult> {
    let result = super.tryCall("collect", "collect():(uint256,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  earned(account: Address, token: Address): BigInt {
    let result = super.call("earned", "earned(address,address):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_earned(account: Address, token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address,address):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountsForLiquidity(
    liquidity: BigInt
  ): Pool__getAmountsForLiquidityResult {
    let result = super.call(
      "getAmountsForLiquidity",
      "getAmountsForLiquidity(uint128):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(liquidity)]
    );

    return new Pool__getAmountsForLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAmountsForLiquidity(
    liquidity: BigInt
  ): ethereum.CallResult<Pool__getAmountsForLiquidityResult> {
    let result = super.tryCall(
      "getAmountsForLiquidity",
      "getAmountsForLiquidity(uint128):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(liquidity)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__getAmountsForLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getBufferToken0Balance(): BigInt {
    let result = super.call(
      "getBufferToken0Balance",
      "getBufferToken0Balance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBufferToken0Balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBufferToken0Balance",
      "getBufferToken0Balance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBufferToken1Balance(): BigInt {
    let result = super.call(
      "getBufferToken1Balance",
      "getBufferToken1Balance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBufferToken1Balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBufferToken1Balance",
      "getBufferToken1Balance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBufferTokenBalance(): Pool__getBufferTokenBalanceResult {
    let result = super.call(
      "getBufferTokenBalance",
      "getBufferTokenBalance():(uint256,uint256)",
      []
    );

    return new Pool__getBufferTokenBalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getBufferTokenBalance(): ethereum.CallResult<
    Pool__getBufferTokenBalanceResult
  > {
    let result = super.tryCall(
      "getBufferTokenBalance",
      "getBufferTokenBalance():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__getBufferTokenBalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getLiquidityForAmounts(amount0: BigInt, amount1: BigInt): BigInt {
    let result = super.call(
      "getLiquidityForAmounts",
      "getLiquidityForAmounts(uint256,uint256):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLiquidityForAmounts(
    amount0: BigInt,
    amount1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiquidityForAmounts",
      "getLiquidityForAmounts(uint256,uint256):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionLiquidity(): BigInt {
    let result = super.call(
      "getPositionLiquidity",
      "getPositionLiquidity():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPositionLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionLiquidity",
      "getPositionLiquidity():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardForDuration(token: Address): BigInt {
    let result = super.call(
      "getRewardForDuration",
      "getRewardForDuration(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getRewardForDuration(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardForDuration",
      "getRewardForDuration(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardTokens(): Array<Address> {
    let result = super.call(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getRewardTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRewardTokensCount(): BigInt {
    let result = super.call(
      "getRewardTokensCount",
      "getRewardTokensCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRewardTokensCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardTokensCount",
      "getRewardTokensCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakedTokenBalance(): Pool__getStakedTokenBalanceResult {
    let result = super.call(
      "getStakedTokenBalance",
      "getStakedTokenBalance():(uint256,uint256)",
      []
    );

    return new Pool__getStakedTokenBalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getStakedTokenBalance(): ethereum.CallResult<
    Pool__getStakedTokenBalanceResult
  > {
    let result = super.tryCall(
      "getStakedTokenBalance",
      "getStakedTokenBalance():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__getStakedTokenBalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTicks(): Pool__getTicksResult {
    let result = super.call("getTicks", "getTicks():(int24,int24)", []);

    return new Pool__getTicksResult(result[0].toI32(), result[1].toI32());
  }

  try_getTicks(): ethereum.CallResult<Pool__getTicksResult> {
    let result = super.tryCall("getTicks", "getTicks():(int24,int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__getTicksResult(value[0].toI32(), value[1].toI32())
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTimeRewardApplicable(): BigInt {
    let result = super.call(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastTimeRewardApplicable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdateTime(param0: Address): BigInt {
    let result = super.call(
      "lastUpdateTime",
      "lastUpdateTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastUpdateTime(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTime",
      "lastUpdateTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pauseContract(): boolean {
    let result = super.call("pauseContract", "pauseContract():(bool)", []);

    return result[0].toBoolean();
  }

  try_pauseContract(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pauseContract", "pauseContract():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  periodFinish(): BigInt {
    let result = super.call("periodFinish", "periodFinish():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodFinish(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodFinish", "periodFinish():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolFee(): i32 {
    let result = super.call("poolFee", "poolFee():(uint24)", []);

    return result[0].toI32();
  }

  try_poolFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("poolFee", "poolFee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  rewardEscrow(): Address {
    let result = super.call("rewardEscrow", "rewardEscrow():(address)", []);

    return result[0].toAddress();
  }

  try_rewardEscrow(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardEscrow", "rewardEscrow():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardInfo(param0: Address): Pool__rewardInfoResult {
    let result = super.call(
      "rewardInfo",
      "rewardInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Pool__rewardInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_rewardInfo(param0: Address): ethereum.CallResult<Pool__rewardInfoResult> {
    let result = super.tryCall(
      "rewardInfo",
      "rewardInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__rewardInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  rewardPerToken(token: Address): BigInt {
    let result = super.call(
      "rewardPerToken",
      "rewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_rewardPerToken(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardTokens(param0: BigInt): Address {
    let result = super.call("rewardTokens", "rewardTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_rewardTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardTokens",
      "rewardTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardsAreEscrowed(): boolean {
    let result = super.call(
      "rewardsAreEscrowed",
      "rewardsAreEscrowed():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_rewardsAreEscrowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rewardsAreEscrowed",
      "rewardsAreEscrowed():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardsDuration(): BigInt {
    let result = super.call(
      "rewardsDuration",
      "rewardsDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardsDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsDuration",
      "rewardsDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedBalanceOf(account: Address): BigInt {
    let result = super.call(
      "stakedBalanceOf",
      "stakedBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_stakedBalanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedBalanceOf",
      "stakedBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedToken(): Address {
    let result = super.call("stakedToken", "stakedToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakedToken", "stakedToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedTotalSupply(): BigInt {
    let result = super.call(
      "stakedTotalSupply",
      "stakedTotalSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakedTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedTotalSupply",
      "stakedTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token0DecimalMultiplier(): BigInt {
    let result = super.call(
      "token0DecimalMultiplier",
      "token0DecimalMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_token0DecimalMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "token0DecimalMultiplier",
      "token0DecimalMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token0Decimals(): i32 {
    let result = super.call("token0Decimals", "token0Decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_token0Decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "token0Decimals",
      "token0Decimals():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1DecimalMultiplier(): BigInt {
    let result = super.call(
      "token1DecimalMultiplier",
      "token1DecimalMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_token1DecimalMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "token1DecimalMultiplier",
      "token1DecimalMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token1Decimals(): i32 {
    let result = super.call("token1Decimals", "token1Decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_token1Decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "token1Decimals",
      "token1Decimals():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  tokenId(): BigInt {
    let result = super.call("tokenId", "tokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenId", "tokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradeFee(): BigInt {
    let result = super.call("tradeFee", "tradeFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tradeFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tradeFee", "tradeFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uniContracts(): Pool__uniContractsResult {
    let result = super.call(
      "uniContracts",
      "uniContracts():(address,address,address)",
      []
    );

    return new Pool__uniContractsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_uniContracts(): ethereum.CallResult<Pool__uniContractsResult> {
    let result = super.tryCall(
      "uniContracts",
      "uniContracts():(address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__uniContractsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  uniswapPool(): Address {
    let result = super.call("uniswapPool", "uniswapPool():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("uniswapPool", "uniswapPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unpauseContract(): boolean {
    let result = super.call("unpauseContract", "unpauseContract():(bool)", []);

    return result[0].toBoolean();
  }

  try_unpauseContract(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "unpauseContract",
      "unpauseContract():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddManagerCall extends ethereum.Call {
  get inputs(): AddManagerCall__Inputs {
    return new AddManagerCall__Inputs(this);
  }

  get outputs(): AddManagerCall__Outputs {
    return new AddManagerCall__Outputs(this);
  }
}

export class AddManagerCall__Inputs {
  _call: AddManagerCall;

  constructor(call: AddManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddManagerCall__Outputs {
  _call: AddManagerCall;

  constructor(call: AddManagerCall) {
    this._call = call;
  }
}

export class AdminStakeCall extends ethereum.Call {
  get inputs(): AdminStakeCall__Inputs {
    return new AdminStakeCall__Inputs(this);
  }

  get outputs(): AdminStakeCall__Outputs {
    return new AdminStakeCall__Outputs(this);
  }
}

export class AdminStakeCall__Inputs {
  _call: AdminStakeCall;

  constructor(call: AdminStakeCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AdminStakeCall__Outputs {
  _call: AdminStakeCall;

  constructor(call: AdminStakeCall) {
    this._call = call;
  }
}

export class AdminSwapCall extends ethereum.Call {
  get inputs(): AdminSwapCall__Inputs {
    return new AdminSwapCall__Inputs(this);
  }

  get outputs(): AdminSwapCall__Outputs {
    return new AdminSwapCall__Outputs(this);
  }
}

export class AdminSwapCall__Inputs {
  _call: AdminSwapCall;

  constructor(call: AdminSwapCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _0for1(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AdminSwapCall__Outputs {
  _call: AdminSwapCall;

  constructor(call: AdminSwapCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get collected0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get collected1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectAndReinvestCall extends ethereum.Call {
  get inputs(): CollectAndReinvestCall__Inputs {
    return new CollectAndReinvestCall__Inputs(this);
  }

  get outputs(): CollectAndReinvestCall__Outputs {
    return new CollectAndReinvestCall__Outputs(this);
  }
}

export class CollectAndReinvestCall__Inputs {
  _call: CollectAndReinvestCall;

  constructor(call: CollectAndReinvestCall) {
    this._call = call;
  }
}

export class CollectAndReinvestCall__Outputs {
  _call: CollectAndReinvestCall;

  constructor(call: CollectAndReinvestCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get inputAsset(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _symbol(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tickLower(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _tickUpper(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _poolFee(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _tradeFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _token0(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _stakedToken(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _terminal(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _uniswapPool(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get contracts(): InitializeCallContractsStruct {
    return this._call.inputValues[10].value.toTuple() as InitializeCallContractsStruct;
  }

  get stakingParams(): InitializeCallStakingParamsStruct {
    return this._call.inputValues[11].value.toTuple() as InitializeCallStakingParamsStruct;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallContractsStruct extends ethereum.Tuple {
  get router(): Address {
    return this[0].toAddress();
  }

  get quoter(): Address {
    return this[1].toAddress();
  }

  get positionManager(): Address {
    return this[2].toAddress();
  }
}

export class InitializeCallStakingParamsStruct extends ethereum.Tuple {
  get rewardTokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get rewardEscrow(): Address {
    return this[1].toAddress();
  }

  get rewardsAreEscrowed(): boolean {
    return this[2].toBoolean();
  }
}

export class InitializeRewardCall extends ethereum.Call {
  get inputs(): InitializeRewardCall__Inputs {
    return new InitializeRewardCall__Inputs(this);
  }

  get outputs(): InitializeRewardCall__Outputs {
    return new InitializeRewardCall__Outputs(this);
  }
}

export class InitializeRewardCall__Inputs {
  _call: InitializeRewardCall;

  constructor(call: InitializeRewardCall) {
    this._call = call;
  }

  get rewardAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeRewardCall__Outputs {
  _call: InitializeRewardCall;

  constructor(call: InitializeRewardCall) {
    this._call = call;
  }
}

export class MintInitialCall extends ethereum.Call {
  get inputs(): MintInitialCall__Inputs {
    return new MintInitialCall__Inputs(this);
  }

  get outputs(): MintInitialCall__Outputs {
    return new MintInitialCall__Outputs(this);
  }
}

export class MintInitialCall__Inputs {
  _call: MintInitialCall;

  constructor(call: MintInitialCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintInitialCall__Outputs {
  _call: MintInitialCall;

  constructor(call: MintInitialCall) {
    this._call = call;
  }
}

export class PauseContractCall extends ethereum.Call {
  get inputs(): PauseContractCall__Inputs {
    return new PauseContractCall__Inputs(this);
  }

  get outputs(): PauseContractCall__Outputs {
    return new PauseContractCall__Outputs(this);
  }
}

export class PauseContractCall__Inputs {
  _call: PauseContractCall;

  constructor(call: PauseContractCall) {
    this._call = call;
  }
}

export class PauseContractCall__Outputs {
  _call: PauseContractCall;

  constructor(call: PauseContractCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ReinvestCall extends ethereum.Call {
  get inputs(): ReinvestCall__Inputs {
    return new ReinvestCall__Inputs(this);
  }

  get outputs(): ReinvestCall__Outputs {
    return new ReinvestCall__Outputs(this);
  }
}

export class ReinvestCall__Inputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class ReinvestCall__Outputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRewardsDurationCall extends ethereum.Call {
  get inputs(): SetRewardsDurationCall__Inputs {
    return new SetRewardsDurationCall__Inputs(this);
  }

  get outputs(): SetRewardsDurationCall__Outputs {
    return new SetRewardsDurationCall__Outputs(this);
  }
}

export class SetRewardsDurationCall__Inputs {
  _call: SetRewardsDurationCall;

  constructor(call: SetRewardsDurationCall) {
    this._call = call;
  }

  get _rewardsDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardsDurationCall__Outputs {
  _call: SetRewardsDurationCall;

  constructor(call: SetRewardsDurationCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseContractCall extends ethereum.Call {
  get inputs(): UnpauseContractCall__Inputs {
    return new UnpauseContractCall__Inputs(this);
  }

  get outputs(): UnpauseContractCall__Outputs {
    return new UnpauseContractCall__Outputs(this);
  }
}

export class UnpauseContractCall__Inputs {
  _call: UnpauseContractCall;

  constructor(call: UnpauseContractCall) {
    this._call = call;
  }
}

export class UnpauseContractCall__Outputs {
  _call: UnpauseContractCall;

  constructor(call: UnpauseContractCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAndClaimRewardCall extends ethereum.Call {
  get inputs(): WithdrawAndClaimRewardCall__Inputs {
    return new WithdrawAndClaimRewardCall__Inputs(this);
  }

  get outputs(): WithdrawAndClaimRewardCall__Outputs {
    return new WithdrawAndClaimRewardCall__Outputs(this);
  }
}

export class WithdrawAndClaimRewardCall__Inputs {
  _call: WithdrawAndClaimRewardCall;

  constructor(call: WithdrawAndClaimRewardCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawAndClaimRewardCall__Outputs {
  _call: WithdrawAndClaimRewardCall;

  constructor(call: WithdrawAndClaimRewardCall) {
    this._call = call;
  }
}
